// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// 場所関連

model Location {
    id              String @id @default(cuid())
    label           String
    locationTypeId  String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    locationOnSchedule LocationOnSchedule[]
    exceptionalSchedules ExceptionalSchedule[]

    locationType LocationType @relation(fields: [locationTypeId], references: [id])
}

model LocationType {
    id              String @id @default(cuid())
    label           String
    capacity        Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    locations       Location[]
}

model Course {
    id              String @id @default(cuid())
    name            String
    description     String
    themeColor      String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    weeklySchedules WeeklySchedule[]
    exceptionalSchedules ExceptionalSchedule[]
}

model TimeSlot {
    id              String @id @default(cuid())
    label           String
    start           DateTime
    end             DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    weeklySchedules WeeklySchedule[]
    exceptionalSchedules ExceptionalSchedule[]
}

model WeeklySchedule {
    id              String @id @default(cuid())
    courseId        String
    timeSlotId      String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    dayOfWeek       Int

    course Course @relation(fields: [courseId], references: [id])
    timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

    userSchedules   UserSchedule[]
    locations       LocationOnSchedule[]
    overrideSchedules OverrideSchedule[]
}

model LocationOnSchedule {
    id              String @id @default(cuid())
    scheduleId      String
    locationId      String

    schedule WeeklySchedule @relation(fields: [scheduleId], references: [id])
    location Location @relation(fields: [locationId], references: [id])

    @@unique([scheduleId, locationId])
}


model ExceptionalSchedule {
    id              String @id @default(cuid())
    locationId      String
    courseId        String
    timeSlotId      String
    date            DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    location Location @relation(fields: [locationId], references: [id])
    course Course @relation(fields: [courseId], references: [id])
    timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])
}

// ユーザー関連

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    studentId       String?  // 学籍番号

    accounts        Account[]
    sessions        Session[]
    userSchedules   UserSchedule[]
    overrideSchedules OverrideSchedule[]
    adminUser       AdminUser[]
    bookmarks       Bookmark[] @relation("user")
    bookmarkedUsers Bookmark[] @relation("target")
}

model UserSchedule {
    id              String @id @default(cuid())
    userId          String
    scheduleId      String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    schedule WeeklySchedule @relation(fields: [scheduleId], references: [id])
}

model OverrideSchedule {
    id              String @id @default(cuid())
    userId          String
    scheduleId      String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    schedule WeeklySchedule @relation(fields: [scheduleId], references: [id])
}

model Bookmark {
    id              String @id @default(cuid())
    userId          String
    targetId        String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user User @relation("user", fields: [userId], references: [id])
    target User @relation("target", fields: [targetId], references: [id])

    @@unique([userId, targetId])
}

model AdminUser {
    id              String @id @default(cuid())
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

// 通知関連

model GloabalNotification {
    id              String @id @default(cuid())
    title           String
    body            String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}